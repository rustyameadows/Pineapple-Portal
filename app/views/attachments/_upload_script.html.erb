<script type="module">
  const checksumHex = async (file) => {
    const buffer = await file.arrayBuffer();
    const digest = await crypto.subtle.digest("SHA-256", buffer);
    return Array.from(new Uint8Array(digest)).map(b => b.toString(16).padStart(2, "0")).join("");
  };

  const uploadWithProgress = (url, file, contentType, onProgress) => {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("PUT", url, true);
      xhr.setRequestHeader("Content-Type", contentType);

      xhr.upload.addEventListener("progress", (event) => {
        onProgress(event.loaded, event.total, event.lengthComputable);
      });

      xhr.addEventListener("load", () => {
        if (xhr.status >= 200 && xhr.status < 300) {
          resolve();
        } else {
          reject(new Error("Upload failed"));
        }
      });

      xhr.addEventListener("error", () => {
        reject(new Error("Upload failed"));
      });

      xhr.send(file);
    });
  };

  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("[data-attachment-upload-form]").forEach((form) => {
      const fileInput = form.querySelector("[data-attachment-upload-target='file']");
      const statusEl = form.querySelector("[data-attachment-upload-target='status']");
      const uiContainer = form.querySelector("[data-attachment-upload-target='ui']");
      const progressEl = form.querySelector("[data-attachment-upload-target='progress']");
      const progressBar = form.querySelector("[data-attachment-upload-target='progressBar']");
      const progressLabel = form.querySelector("[data-attachment-upload-target='progressLabel']");
      const progressPercent = form.querySelector("[data-attachment-upload-target='progressPercent']");
      const submitButton = form.querySelector("input[type=submit], button[type=submit]");
      const selectExisting = form.querySelector("select[name='attachment[document_id]']");
      const csrfToken = document.querySelector("meta[name='csrf-token']")?.content;

      const storageUriInput = form.querySelector("#attachment_file_upload_storage_uri");
      const checksumInput = form.querySelector("#attachment_file_upload_checksum");
      const sizeInput = form.querySelector("#attachment_file_upload_size_bytes");
      const contentTypeInput = form.querySelector("#attachment_file_upload_content_type");
      const titleInput = form.querySelector("#attachment_file_upload_title");
      const logicalIdInput = form.querySelector("#attachment_file_upload_logical_id");

      fileInput?.addEventListener("change", async () => {
        const file = fileInput.files?.[0];

        const resetProgress = () => {
          if (uiContainer) uiContainer.classList.remove("is-uploading");
          if (progressEl) {
            progressEl.hidden = true;
          }
          if (progressBar) progressBar.style.width = "0%";
          if (progressPercent) progressPercent.textContent = "0%";
        };

        const showProgress = (label, percent) => {
          if (uiContainer) uiContainer.classList.add("is-uploading");
          if (progressEl) progressEl.hidden = false;
          if (progressLabel) progressLabel.textContent = label;
          if (progressBar) progressBar.style.width = `${percent}%`;
          if (progressPercent) progressPercent.textContent = `${Math.round(percent)}%`;
        };

        if (!file) {
          if (submitButton) submitButton.disabled = false;
          if (statusEl) statusEl.textContent = "Optional: upload a new file to attach.";
          resetProgress();
          return;
        }

        if (submitButton) submitButton.disabled = true;
        if (selectExisting) selectExisting.value = "";
        if (statusEl) statusEl.textContent = "Preparing upload...";
        resetProgress();

        try {
          const response = await fetch(form.dataset.presignUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-CSRF-Token": csrfToken || ""
            },
            body: JSON.stringify({ filename: file.name, content_type: file.type || "application/octet-stream" })
          });

          if (!response.ok) throw new Error("Could not prepare upload");

          const data = await response.json();

          if (statusEl) statusEl.textContent = "Uploading file...";
          showProgress("Uploading", 0);

          await uploadWithProgress(data.upload_url, file, data.content_type, (loaded, total, computable) => {
            if (!computable) {
              showProgress("Uploading", 25);
              return;
            }

            const percent = total > 0 ? (loaded / total) * 100 : 0;
            showProgress("Uploading", Math.min(99, percent));
          });

          const checksum = await checksumHex(file);

          if (storageUriInput) storageUriInput.value = data.storage_uri;
          if (checksumInput) checksumInput.value = checksum;
          if (sizeInput) sizeInput.value = file.size;
          if (contentTypeInput) contentTypeInput.value = data.content_type;
          if (titleInput) titleInput.value = file.name;
          if (logicalIdInput) logicalIdInput.value = data.logical_id;

          showProgress("Processing", 100);
          if (statusEl) statusEl.textContent = "File uploaded. Add notes and click Add Attachment.";
          if (submitButton) submitButton.disabled = false;
        } catch (error) {
          console.error(error);
          if (statusEl) statusEl.textContent = "Upload failed. Please try again.";
          if (submitButton) submitButton.disabled = true;
          resetProgress();
        }
      });
    });
  });
</script>
